"""Servidor FastAPI m√≠nimo para demonstra√ß√£o das melhorias de estabilidade."""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field
from typing import Optional, Dict, Any
from contextlib import asynccontextmanager
import json
import uuid
import psutil
import time
import logging
from datetime import datetime

# Configura√ß√£o de logging estruturado
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Vari√°veis globais para monitoramento
app_start_time = time.time()
health_status = {'status': 'starting', 'last_check': None}
metrics = {
    'requests_total': 0,
    'requests_in_progress': 0,
    'errors_total': 0,
    'sessions_created': 0,
    'sessions_active': 0
}

# Mock de sess√µes para demonstra√ß√£o
mock_sessions = {}

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gerencia ciclo de vida da aplica√ß√£o com inicializa√ß√£o e shutdown limpos."""
    # Inicializa√ß√£o
    logger.info("üöÄ Iniciando Claude Chat API (Vers√£o M√≠nima)...")
    health_status['status'] = 'healthy'
    health_status['last_check'] = datetime.now().isoformat()
    
    logger.info("‚úÖ Claude Chat API iniciada com sucesso")
    
    yield
    
    # Shutdown limpo
    logger.info("üîÑ Iniciando shutdown graceful...")
    health_status['status'] = 'shutting_down'
    
    # Limpa sess√µes mock
    mock_sessions.clear()
    
    logger.info("‚úÖ Shutdown conclu√≠do")

app = FastAPI(
    title="Claude Chat API",
    lifespan=lifespan,
    description="""
    ## API de Chat com Claude Code SDK - Vers√£o de Demonstra√ß√£o
    
    Esta vers√£o demonstra as melhorias de estabilidade implementadas:
    
    * **Health Check Detalhado** - `/health/detailed` com m√©tricas completas
    * **M√©tricas B√°sicas** - `/metrics` para monitoramento
    * **Heartbeat** - `/heartbeat` para verifica√ß√£o simples
    * **Graceful Shutdown** - Shutdown limpo usando lifespan events
    * **Logging Estruturado** - Logs detalhados para auditoria
    """,
    version="1.0.0"
)

# Configura√ß√£o CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Fun√ß√µes utilit√°rias para monitoramento
def get_system_metrics() -> Dict[str, Any]:
    """Coleta m√©tricas do sistema."""
    try:
        # Informa√ß√µes da CPU
        cpu_percent = psutil.cpu_percent(interval=0.1)
        cpu_count = psutil.cpu_count()
        
        # Informa√ß√µes da mem√≥ria
        memory = psutil.virtual_memory()
        
        # Informa√ß√µes do processo atual
        process = psutil.Process()
        process_memory = process.memory_info()
        
        return {
            "cpu": {
                "usage_percent": cpu_percent,
                "count": cpu_count,
                "load_average": list(psutil.getloadavg()) if hasattr(psutil, 'getloadavg') else None
            },
            "memory": {
                "total_gb": round(memory.total / (1024**3), 2),
                "available_gb": round(memory.available / (1024**3), 2),
                "usage_percent": memory.percent,
                "process_rss_mb": round(process_memory.rss / (1024**2), 2),
                "process_vms_mb": round(process_memory.vms / (1024**2), 2)
            },
            "disk": {
                "usage_percent": psutil.disk_usage('/').percent
            }
        }
    except Exception as e:
        logger.error(f"Erro ao coletar m√©tricas do sistema: {e}")
        return {"error": str(e)}

async def check_claude_sdk_health() -> Dict[str, Any]:
    """Simula verifica√ß√£o de status do Claude SDK."""
    try:
        # Simula teste de conectividade
        start_time = time.time()
        # Simula delay de conex√£o
        import asyncio
        await asyncio.sleep(0.1)
        connection_time = time.time() - start_time
        
        return {
            "status": "connected",
            "connection_time_ms": round(connection_time * 1000, 2),
            "last_check": datetime.now().isoformat(),
            "mock_mode": True  # Indica que √© uma simula√ß√£o
        }
    except Exception as e:
        logger.error(f"Erro na verifica√ß√£o do Claude SDK: {e}")
        return {
            "status": "error",
            "error": str(e),
            "last_check": datetime.now().isoformat()
        }

# Middleware para contagem de requests
@app.middleware("http")
async def metrics_middleware(request, call_next):
    """Middleware para coletar m√©tricas de requests."""
    metrics['requests_total'] += 1
    metrics['requests_in_progress'] += 1
    
    start_time = time.time()
    
    try:
        response = await call_next(request)
        return response
    except Exception as e:
        metrics['errors_total'] += 1
        logger.error(f"Erro no request: {e}")
        raise
    finally:
        metrics['requests_in_progress'] -= 1

# Models
class HealthResponse(BaseModel):
    """Resposta do health check."""
    status: str = Field(..., description="Status da API")
    service: str = Field(..., description="Nome do servi√ßo")

class DetailedHealthResponse(BaseModel):
    """Resposta detalhada do health check."""
    status: str
    service: str 
    version: str
    uptime_seconds: float
    timestamp: str
    sessions: Dict[str, Any]
    system: Dict[str, Any]
    claude_sdk: Dict[str, Any]
    performance: Dict[str, Any]

class MetricsResponse(BaseModel):
    """Resposta com m√©tricas b√°sicas."""
    requests_total: int
    requests_in_progress: int
    errors_total: int
    sessions_created: int
    sessions_active: int
    uptime_seconds: float

class HeartbeatResponse(BaseModel):
    """Resposta do heartbeat."""
    alive: bool
    timestamp: str
    uptime: float

# Endpoints

@app.get("/", response_model=HealthResponse)
async def root() -> HealthResponse:
    """Health check endpoint para verificar o status da API."""
    return HealthResponse(status="ok", service="Claude Chat API (Minimal)")

@app.get("/health/detailed", response_model=DetailedHealthResponse)
async def detailed_health() -> DetailedHealthResponse:
    """Health check detalhado com m√©tricas completas."""
    current_time = datetime.now()
    uptime = time.time() - app_start_time
    
    # Atualiza status global
    health_status['last_check'] = current_time.isoformat()
    
    # Coleta informa√ß√µes de sess√µes (mock)
    session_info = {
        "active_count": len(mock_sessions),
        "total_created": metrics['sessions_created'],
        "active_sessions": list(mock_sessions.keys())[:10],  # Mostra apenas 10 primeiras
        "session_configs": len(mock_sessions)
    }
    
    # M√©tricas do sistema
    system_metrics = get_system_metrics()
    
    # Status do Claude SDK (simulado)
    claude_status = await check_claude_sdk_health()
    
    # M√©tricas de performance
    performance_metrics = {
        "requests_total": metrics['requests_total'],
        "requests_in_progress": metrics['requests_in_progress'], 
        "errors_total": metrics['errors_total'],
        "error_rate": round(metrics['errors_total'] / max(metrics['requests_total'], 1) * 100, 2),
        "avg_response_time_ms": None  # Pode ser implementado com hist√≥rico
    }
    
    # Determina status geral
    overall_status = "healthy"
    if claude_status["status"] == "error":
        overall_status = "degraded"
    elif system_metrics.get("memory", {}).get("usage_percent", 0) > 90:
        overall_status = "degraded" 
    elif performance_metrics['error_rate'] > 10:
        overall_status = "degraded"
    
    return DetailedHealthResponse(
        status=overall_status,
        service="Claude Chat API (Minimal)",
        version="1.0.0",
        uptime_seconds=uptime,
        timestamp=current_time.isoformat(),
        sessions=session_info,
        system=system_metrics,
        claude_sdk=claude_status,
        performance=performance_metrics
    )

@app.get("/metrics", response_model=MetricsResponse)
async def get_metrics() -> MetricsResponse:
    """Endpoint de m√©tricas b√°sicas para monitoramento."""
    uptime = time.time() - app_start_time
    metrics['sessions_active'] = len(mock_sessions)
    
    return MetricsResponse(
        requests_total=metrics['requests_total'],
        requests_in_progress=metrics['requests_in_progress'],
        errors_total=metrics['errors_total'],
        sessions_created=metrics['sessions_created'],
        sessions_active=metrics['sessions_active'],
        uptime_seconds=uptime
    )

@app.get("/heartbeat", response_model=HeartbeatResponse)
async def heartbeat() -> HeartbeatResponse:
    """Heartbeat simples para monitoramento externo."""
    return HeartbeatResponse(
        alive=True,
        timestamp=datetime.now().isoformat(),
        uptime=time.time() - app_start_time
    )

# Endpoints de demonstra√ß√£o com fallbacks

@app.post("/api/session-demo")
async def create_demo_session(config: Dict[str, Any] = {}):
    """Cria uma sess√£o de demonstra√ß√£o com fallbacks."""
    session_id = str(uuid.uuid4())
    
    try:
        # Simula cria√ß√£o de sess√£o com poss√≠vel falha
        if "force_error" in config:
            raise Exception("Erro simulado na cria√ß√£o de sess√£o")
        
        # Simula configura√ß√£o da sess√£o
        mock_sessions[session_id] = {
            "created_at": datetime.now().isoformat(),
            "config": config,
            "active": True,
            "retry_count": 0
        }
        
        # Atualiza m√©tricas
        metrics['sessions_created'] += 1
        
        logger.info(f"‚úÖ Sess√£o demo criada: {session_id}")
        return {"session_id": session_id, "status": "created"}
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao criar sess√£o demo: {e}")
        
        # Fallback: retorna sess√£o tempor√°ria
        temp_session_id = f"temp_{int(time.time())}"
        mock_sessions[temp_session_id] = {
            "created_at": datetime.now().isoformat(),
            "config": {"fallback": True},
            "active": True,
            "temporary": True
        }
        
        logger.info(f"üîÑ Sess√£o tempor√°ria criada como fallback: {temp_session_id}")
        return {
            "session_id": temp_session_id, 
            "status": "fallback_created",
            "warning": "Sess√£o tempor√°ria criada devido a falha"
        }

@app.get("/api/session-demo/{session_id}/status")
async def get_demo_session_status(session_id: str):
    """Obt√©m status de uma sess√£o demo com reconex√£o autom√°tica."""
    
    if session_id not in mock_sessions:
        # Simula tentativa de reconex√£o
        logger.info(f"üîÑ Tentando reconectar sess√£o: {session_id}")
        
        # Simula falha/sucesso na reconex√£o
        import random
        if random.random() > 0.3:  # 70% chance de sucesso
            # Reconex√£o bem-sucedida
            mock_sessions[session_id] = {
                "created_at": datetime.now().isoformat(),
                "config": {"reconnected": True},
                "active": True,
                "reconnect_count": 1
            }
            logger.info(f"‚úÖ Sess√£o reconectada com sucesso: {session_id}")
            return {
                "session_id": session_id,
                "status": "reconnected",
                "active": True
            }
        else:
            # Falha na reconex√£o
            logger.warning(f"‚ö†Ô∏è Falha na reconex√£o da sess√£o: {session_id}")
            raise HTTPException(
                status_code=404, 
                detail="Session not found and reconnection failed"
            )
    
    session = mock_sessions[session_id]
    return {
        "session_id": session_id,
        "status": "active" if session["active"] else "inactive",
        **session
    }

@app.delete("/api/session-demo/{session_id}")
async def delete_demo_session(session_id: str):
    """Deleta uma sess√£o demo com shutdown graceful."""
    if session_id not in mock_sessions:
        raise HTTPException(status_code=404, detail="Session not found")
    
    session = mock_sessions[session_id]
    
    try:
        # Simula shutdown graceful
        logger.info(f"üîÑ Iniciando shutdown graceful da sess√£o: {session_id}")
        
        # Simula cleanup de recursos
        import asyncio
        await asyncio.sleep(0.1)
        
        # Remove sess√£o
        del mock_sessions[session_id]
        
        logger.info(f"‚úÖ Sess√£o removida com sucesso: {session_id}")
        return {"status": "deleted", "session_id": session_id}
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao deletar sess√£o: {e}")
        
        # Fallback: marca como inativa
        session["active"] = False
        session["error"] = str(e)
        
        logger.warning(f"‚ö†Ô∏è Sess√£o marcada como inativa devido a erro: {session_id}")
        return {
            "status": "marked_inactive",
            "session_id": session_id,
            "warning": "Sess√£o marcada como inativa devido a erro no shutdown"
        }

@app.get("/api/demo/force-error")
async def force_error():
    """Endpoint para testar tratamento de erros."""
    logger.error("‚ùå Erro for√ßado para teste")
    raise HTTPException(status_code=500, detail="Erro simulado para teste")

@app.get("/api/demo/system-stress")  
async def system_stress():
    """Simula stress no sistema para testar degrada√ß√£o graceful."""
    import random
    
    # Simula alto uso de CPU/mem√≥ria
    stress_level = random.uniform(0.7, 0.95)
    
    if stress_level > 0.9:
        logger.warning(f"‚ö†Ô∏è Sistema sob stress alto: {stress_level:.2%}")
        return {
            "status": "degraded",
            "system_load": stress_level,
            "recommendation": "Considere reduzir carga ou escalar recursos"
        }
    else:
        return {
            "status": "normal",
            "system_load": stress_level
        }

if __name__ == "__main__":
    import uvicorn
    import os
    
    host = os.getenv("HOST", "127.0.0.1")
    port = int(os.getenv("PORT", "8989"))
    log_level = os.getenv("LOG_LEVEL", "info").lower()
    
    print(f"""
üöÄ Iniciando Claude Chat API - Vers√£o de Demonstra√ß√£o
üìç URL: http://{host}:{port}
üìä Health Check Detalhado: http://{host}:{port}/health/detailed
üìà M√©tricas: http://{host}:{port}/metrics  
üíì Heartbeat: http://{host}:{port}/heartbeat
üìñ Documenta√ß√£o: http://{host}:{port}/docs
    """)
    
    uvicorn.run(
        app, 
        host=host, 
        port=port, 
        log_level=log_level,
        reload=False,
        access_log=True
    )