"""
Exemplo de uso do Hist√≥rico de Conversa√ß√£o no SDK Claude

Este exemplo mostra como usar o hist√≥rico de conversa√ß√£o para:
1. Manter contexto entre mensagens
2. Recuperar conversas anteriores
3. Analisar padr√µes de uso
4. Implementar mem√≥ria persistente
"""

import asyncio
import json
from datetime import datetime
from typing import List, Dict, Any

# Importar o SDK estendido
import sys
sys.path.append('/Users/2a/.claude/cc-sdk-chat/api/sdk')

from claude_code_sdk import ExtendedClaudeClient, ClaudeCodeOptions


async def exemplo_basico_historico():
    """Exemplo b√°sico de uso do hist√≥rico de conversa√ß√£o"""
    
    print("=" * 60)
    print("EXEMPLO 1: Hist√≥rico B√°sico de Conversa√ß√£o")
    print("=" * 60)
    
    # Criar cliente com hist√≥rico habilitado
    client = ExtendedClaudeClient(
        ClaudeCodeOptions(
            system_prompt="Voc√™ √© um assistente que lembra de conversas anteriores"
        )
    )
    
    async with client:
        # Primeira pergunta
        print("\nüìù Pergunta 1: Meu nome √© Jo√£o e trabalho com Python")
        await client.query_and_wait("Meu nome √© Jo√£o e trabalho com Python")
        
        # Segunda pergunta (teste de mem√≥ria)
        print("\nüìù Pergunta 2: Qual √© meu nome?")
        response = await client.ask("Qual √© meu nome e com o que trabalho?")
        print(f"ü§ñ Resposta: {response}")
        
        # Recuperar hist√≥rico
        print("\nüìö Hist√≥rico da Conversa√ß√£o:")
        historico = client.get_conversation_history(10)
        for i, msg in enumerate(historico, 1):
            print(f"{i}. [{msg['role']}] {msg['content'][:100]}...")
        
        # Mostrar m√©tricas
        print("\nüìä M√©tricas da Sess√£o:")
        metricas = client.get_metrics()
        print(json.dumps(metricas, indent=2))


async def exemplo_contexto_complexo():
    """Exemplo de manuten√ß√£o de contexto complexo"""
    
    print("\n" + "=" * 60)
    print("EXEMPLO 2: Contexto Complexo e Mem√≥ria de Longo Prazo")
    print("=" * 60)
    
    client = ExtendedClaudeClient()
    
    async with client:
        # Estabelecer contexto inicial
        contexto_projeto = """
        Estou desenvolvendo um sistema de e-commerce em Python com FastAPI.
        O projeto tem as seguintes caracter√≠sticas:
        - Banco de dados PostgreSQL
        - Autentica√ß√£o JWT
        - Sistema de carrinho de compras
        - Integra√ß√£o com gateway de pagamento
        """
        
        print("\nüìù Estabelecendo contexto do projeto...")
        await client.query_and_wait(contexto_projeto)
        
        # Armazenar no contexto permanente
        client.memory.set_context("projeto", "e-commerce")
        client.memory.set_context("tecnologias", ["Python", "FastAPI", "PostgreSQL", "JWT"])
        client.memory.set_context("features", ["carrinho", "pagamento", "autentica√ß√£o"])
        
        # Fazer perguntas espec√≠ficas que usam o contexto
        perguntas = [
            "Como implementar o carrinho de compras?",
            "Qual a melhor forma de estruturar as tabelas do banco?",
            "Como garantir seguran√ßa na autentica√ß√£o?"
        ]
        
        for pergunta in perguntas:
            print(f"\n‚ùì Pergunta: {pergunta}")
            resposta = await client.ask(pergunta)
            print(f"‚úÖ Resposta resumida: {resposta[:200]}...")
            
            # Adicionar conhecimento ao contexto
            if "carrinho" in pergunta.lower():
                client.memory.set_context("carrinho_discutido", True)
        
        # Mostrar contexto acumulado
        print("\nüß† Contexto Acumulado:")
        print(f"- Projeto: {client.memory.get_context('projeto')}")
        print(f"- Tecnologias: {client.memory.get_context('tecnologias')}")
        print(f"- Features: {client.memory.get_context('features')}")
        print(f"- Carrinho discutido: {client.memory.get_context('carrinho_discutido', False)}")


async def exemplo_analise_conversa():
    """Exemplo de an√°lise de padr√µes na conversa√ß√£o"""
    
    print("\n" + "=" * 60)
    print("EXEMPLO 3: An√°lise de Padr√µes e Insights")
    print("=" * 60)
    
    client = ExtendedClaudeClient()
    
    async with client:
        # Simular v√°rias intera√ß√µes
        interacoes = [
            "Como criar uma API REST?",
            "Explique autentica√ß√£o JWT",
            "Como implementar cache?",
            "O que √© Docker?",
            "Como fazer deploy na AWS?"
        ]
        
        print("\nüîÑ Processando m√∫ltiplas intera√ß√µes...")
        for interacao in interacoes:
            await client.query_and_wait(interacao)
            await asyncio.sleep(0.5)  # Pequeno delay entre perguntas
        
        # Analisar o hist√≥rico
        historico = client.get_conversation_history(20)
        metricas = client.get_metrics()
        
        print("\nüìä An√°lise da Conversa√ß√£o:")
        print(f"- Total de mensagens: {len(historico)}")
        print(f"- Mensagens do usu√°rio: {len([m for m in historico if m['role'] == 'user'])}")
        print(f"- Mensagens do assistente: {len([m for m in historico if m['role'] == 'assistant'])}")
        print(f"- Taxa de sucesso: {metricas['success_rate']:.2%}")
        print(f"- Tempo m√©dio de resposta: {metricas['average_duration_seconds']:.2f}s")
        print(f"- Tokens totais usados: {metricas['total_tokens']}")
        print(f"- Custo total: ${metricas['total_cost_usd']:.4f}")
        
        # Identificar t√≥picos mais frequentes
        print("\nüè∑Ô∏è T√≥picos Identificados:")
        topicos = {
            "API": 0,
            "Autentica√ß√£o": 0,
            "Deploy": 0,
            "Cache": 0,
            "Docker": 0
        }
        
        for msg in historico:
            content = msg['content'].lower()
            for topico in topicos:
                if topico.lower() in content:
                    topicos[topico] += 1
        
        for topico, count in sorted(topicos.items(), key=lambda x: x[1], reverse=True):
            if count > 0:
                print(f"  - {topico}: {count} men√ß√µes")


async def exemplo_persistencia():
    """Exemplo de como persistir o hist√≥rico em arquivo"""
    
    print("\n" + "=" * 60)
    print("EXEMPLO 4: Persist√™ncia do Hist√≥rico")
    print("=" * 60)
    
    import os
    
    HISTORY_FILE = "/Users/2a/.claude/cc-sdk-chat/conversation_history.json"
    
    # Fun√ß√£o para salvar hist√≥rico
    def salvar_historico(client: ExtendedClaudeClient, arquivo: str):
        historico_data = {
            "timestamp": datetime.now().isoformat(),
            "messages": client.get_conversation_history(100),
            "context": client.memory.context,
            "metrics": client.get_metrics()
        }
        
        with open(arquivo, 'w', encoding='utf-8') as f:
            json.dump(historico_data, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ Hist√≥rico salvo em: {arquivo}")
    
    # Fun√ß√£o para carregar hist√≥rico
    def carregar_historico(client: ExtendedClaudeClient, arquivo: str):
        if os.path.exists(arquivo):
            with open(arquivo, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # Restaurar mensagens
            for msg in data['messages']:
                client.memory.add_message(
                    msg['role'],
                    msg['content'],
                    msg.get('metadata', {})
                )
            
            # Restaurar contexto
            client.memory.context = data['context']
            
            print(f"‚úÖ Hist√≥rico carregado: {len(data['messages'])} mensagens")
            print(f"üìÖ √öltima sess√£o: {data['timestamp']}")
            return True
        return False
    
    client = ExtendedClaudeClient()
    
    async with client:
        # Tentar carregar hist√≥rico anterior
        if carregar_historico(client, HISTORY_FILE):
            print("\nüîÑ Continuando conversa anterior...")
            
            # Verificar se lembra do contexto
            ultimo_contexto = client.memory.get_context('ultimo_topico', 'nenhum')
            print(f"üìå √öltimo t√≥pico discutido: {ultimo_contexto}")
        else:
            print("\nüÜï Iniciando nova conversa...")
        
        # Nova intera√ß√£o
        print("\nüí¨ Nova pergunta: Como implementar WebSockets?")
        await client.query_and_wait("Como implementar WebSockets com FastAPI?")
        
        # Salvar contexto atualizado
        client.memory.set_context('ultimo_topico', 'WebSockets')
        client.memory.set_context('ultima_interacao', datetime.now().isoformat())
        
        # Salvar hist√≥rico
        salvar_historico(client, HISTORY_FILE)
        
        # Mostrar resumo
        resumo = client.memory.summarize()
        print("\nüìã Resumo da Sess√£o:")
        print(json.dumps(resumo, indent=2, default=str))


async def exemplo_callbacks_historico():
    """Exemplo de uso de callbacks para monitorar o hist√≥rico em tempo real"""
    
    print("\n" + "=" * 60)
    print("EXEMPLO 5: Callbacks e Monitoramento em Tempo Real")
    print("=" * 60)
    
    # Lista para armazenar eventos
    eventos = []
    
    # Criar cliente com callbacks
    client = ExtendedClaudeClient()
    
    # Registrar callbacks
    def on_message(msg):
        evento = {
            "tipo": "mensagem",
            "timestamp": datetime.now().isoformat(),
            "conteudo": str(msg)[:100]
        }
        eventos.append(evento)
        print(f"üì® [CALLBACK] Nova mensagem recebida")
    
    def on_error(err):
        evento = {
            "tipo": "erro",
            "timestamp": datetime.now().isoformat(),
            "erro": str(err)
        }
        eventos.append(evento)
        print(f"‚ùå [CALLBACK] Erro: {err}")
    
    def on_complete(result):
        print(f"‚úÖ [CALLBACK] Resposta completa - Tokens: {result.usage.output_tokens if result.usage else 0}")
    
    client.on_message(on_message)
    client.on_error(on_error)
    client.on_complete(on_complete)
    
    async with client:
        # Fazer algumas perguntas
        perguntas = [
            "O que √© FastAPI?",
            "Como criar rotas?",
            "Explique middleware"
        ]
        
        for pergunta in perguntas:
            print(f"\n‚û°Ô∏è Enviando: {pergunta}")
            await client.query_and_wait(pergunta)
        
        # Mostrar eventos capturados
        print("\nüìä Eventos Capturados pelos Callbacks:")
        for i, evento in enumerate(eventos[-10:], 1):  # √öltimos 10 eventos
            print(f"{i}. [{evento['tipo']}] {evento['timestamp']} - {evento.get('conteudo', evento.get('erro', ''))[:50]}...")


# Fun√ß√£o principal para executar todos os exemplos
async def main():
    """Executa todos os exemplos de hist√≥rico de conversa√ß√£o"""
    
    print("\n" + "üöÄ DEMONSTRA√á√ÉO DO HIST√ìRICO DE CONVERSA√á√ÉO üöÄ".center(60))
    print("=" * 60)
    
    try:
        # Executar cada exemplo
        await exemplo_basico_historico()
        await exemplo_contexto_complexo()
        await exemplo_analise_conversa()
        await exemplo_persistencia()
        await exemplo_callbacks_historico()
        
        print("\n" + "=" * 60)
        print("‚úÖ TODOS OS EXEMPLOS EXECUTADOS COM SUCESSO!")
        print("=" * 60)
        
    except Exception as e:
        print(f"\n‚ùå Erro durante execu√ß√£o: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    # Executar exemplos
    asyncio.run(main())