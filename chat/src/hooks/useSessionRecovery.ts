import { useCallback } from 'react';
import useChatStore from '@/stores/chatStore';

/**
 * Hook para gerenciar recupera√ß√£o e cleanup de sess√µes com erro
 */
export function useSessionRecovery() {
  const { 
    sessions, 
    activeSessionId, 
    deleteSession, 
    createSession, 
    setActiveSession,
    clearSession 
  } = useChatStore();

  /**
   * Executa cleanup completo de uma sess√£o corrompida
   */
  const cleanupCorruptedSession = useCallback((sessionId: string) => {
    console.log(`üßπ Iniciando cleanup da sess√£o corrompida: ${sessionId}`);
    
    try {
      const session = sessions.get(sessionId);
      if (!session) {
        console.warn(`‚ö†Ô∏è Sess√£o ${sessionId} n√£o encontrada para cleanup`);
        return;
      }

      // Log da sess√£o antes da remo√ß√£o
      console.log(`üìä Removendo sess√£o: ${session.title} (${session.messages.length} mensagens)`);

      // Remove a sess√£o corrompida
      deleteSession(sessionId);

      // Se era a sess√£o ativa, cria uma nova ou seleciona outra
      if (activeSessionId === sessionId) {
        const remainingSessions = Array.from(sessions.keys()).filter(id => id !== sessionId);
        
        if (remainingSessions.length > 0) {
          // Seleciona a primeira sess√£o dispon√≠vel
          setActiveSession(remainingSessions[0]);
          console.log(`‚úÖ Sess√£o ativa mudou para: ${remainingSessions[0]}`);
        } else {
          // Cria nova sess√£o se n√£o h√° outras
          const newSessionId = createSession();
          console.log(`‚úÖ Nova sess√£o criada: ${newSessionId}`);
        }
      }

      console.log(`‚úÖ Cleanup conclu√≠do para sess√£o: ${sessionId}`);
    } catch (error) {
      console.error(`‚ùå Erro durante cleanup da sess√£o ${sessionId}:`, error);
    }
  }, [sessions, activeSessionId, deleteSession, createSession, setActiveSession]);

  /**
   * Tenta recuperar uma sess√£o limpando suas mensagens
   */
  const recoverSession = useCallback((sessionId: string) => {
    console.log(`üîÑ Tentando recuperar sess√£o: ${sessionId}`);
    
    try {
      const session = sessions.get(sessionId);
      if (!session) {
        console.warn(`‚ö†Ô∏è Sess√£o ${sessionId} n√£o encontrada para recupera√ß√£o`);
        return false;
      }

      // Limpa as mensagens da sess√£o mas mant√©m a configura√ß√£o
      clearSession(sessionId);
      console.log(`‚úÖ Sess√£o ${sessionId} foi limpa e est√° pronta para uso`);
      return true;
    } catch (error) {
      console.error(`‚ùå Erro durante recupera√ß√£o da sess√£o ${sessionId}:`, error);
      return false;
    }
  }, [sessions, clearSession]);

  /**
   * Cria uma nova sess√£o de substitui√ß√£o
   */
  const createReplacementSession = useCallback(() => {
    console.log(`‚ûï Criando sess√£o de substitui√ß√£o`);
    
    try {
      const newSessionId = createSession({
        systemPrompt: 'Nova sess√£o ap√≥s erro de recupera√ß√£o',
        allowedTools: [],
        maxTurns: 20,
        permissionMode: 'acceptEdits'
      });
      
      console.log(`‚úÖ Sess√£o de substitui√ß√£o criada: ${newSessionId}`);
      return newSessionId;
    } catch (error) {
      console.error(`‚ùå Erro ao criar sess√£o de substitui√ß√£o:`, error);
      return null;
    }
  }, [createSession]);

  /**
   * Verifica se uma sess√£o est√° em estado corrompido
   */
  const isSessionCorrupted = useCallback((sessionId: string): boolean => {
    const session = sessions.get(sessionId);
    if (!session) return true;

    // Verifica indicadores de corrup√ß√£o
    const hasInvalidMessages = session.messages.some(msg => 
      !msg.id || !msg.content || !msg.role || !msg.timestamp
    );

    const hasNegativeMetrics = (
      session.metrics.totalTokens < 0 ||
      session.metrics.totalCost < 0 ||
      session.metrics.messageCount !== session.messages.length
    );

    return hasInvalidMessages || hasNegativeMetrics;
  }, [sessions]);

  /**
   * Executa verifica√ß√£o de sa√∫de em todas as sess√µes
   */
  const runSessionHealthCheck = useCallback(() => {
    console.log(`üîç Executando verifica√ß√£o de sa√∫de das sess√µes`);
    
    const corruptedSessions: string[] = [];
    const healthySessions: string[] = [];

    sessions.forEach((session, sessionId) => {
      if (isSessionCorrupted(sessionId)) {
        corruptedSessions.push(sessionId);
      } else {
        healthySessions.push(sessionId);
      }
    });

    console.log(`üìä Resultado da verifica√ß√£o:`);
    console.log(`  ‚úÖ Sess√µes saud√°veis: ${healthySessions.length}`);
    console.log(`  ‚ùå Sess√µes corrompidas: ${corruptedSessions.length}`);

    if (corruptedSessions.length > 0) {
      console.log(`‚ö†Ô∏è Sess√µes corrompidas encontradas: ${corruptedSessions.join(', ')}`);
    }

    return {
      healthy: healthySessions,
      corrupted: corruptedSessions,
      total: sessions.size
    };
  }, [sessions, isSessionCorrupted]);

  return {
    cleanupCorruptedSession,
    recoverSession,
    createReplacementSession,
    isSessionCorrupted,
    runSessionHealthCheck
  };
}

export default useSessionRecovery;